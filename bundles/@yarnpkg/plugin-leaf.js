/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-leaf",
factory: function (require) {
var plugin;(()=>{"use strict";var e={d:(a,t)=>{for(var o in t)e.o(t,o)&&!e.o(a,o)&&Object.defineProperty(a,o,{enumerable:!0,get:t[o]})},o:(e,a)=>Object.prototype.hasOwnProperty.call(e,a),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},a={};e.r(a),e.d(a,{default:()=>f});const t=require("@yarnpkg/shell"),o=require("@yarnpkg/cli"),s=require("@yarnpkg/core"),n=require("@yarnpkg/fslib"),r=require("clipanion"),i=async e=>{const{leafModules:a}=e.manifest.raw;if(!Array.isArray(a))return[];const t=await Promise.all(a.map(a=>l(a,e.cwd)));return Promise.all(t.flat())},l=async(e,a)=>(await t.globUtils.match(e+"/package.json",{cwd:a,baseFs:n.xfs})).map(e=>n.ppath.resolve(a,e,"..")).map(async e=>{const a=s.Manifest.fromFile(n.ppath.join(e,"package.json"));let t;try{t=await n.xfs.statPromise(n.ppath.join(e,"node_modules"))}catch(e){}return{manifest:await a,hasNodeModules:Boolean(t),absolutePath:e}});class c extends o.BaseCommand{constructor(){super(...arguments),this.patterns=r.Option.Rest()}async execute(){const e=await s.Configuration.find(this.context.cwd,this.context.plugins),{project:a,workspace:t}=await s.Project.find(e,this.context.cwd);if(!t)throw new o.WorkspaceRequiredError(a.cwd,this.context.cwd);return(await s.StreamReport.start({configuration:e,stdout:this.context.stdout},async a=>{const o=i(t);await Promise.all(this.patterns.map(s=>u(e,t,a,"activate",s,o)))})).exitCode()}}c.paths=[["leaf","activate"]],c.usage=r.Command.Usage({description:"install leaf workspace modules",details:"\n      This command allows to install modules which are excluded from the ordinary installation.\n    ",examples:[["Activate a leaf workspace","yarn leaf activate @tools/git-hooks"]]});class d extends o.BaseCommand{constructor(){super(...arguments),this.patterns=r.Option.Rest()}async execute(){const e=await s.Configuration.find(this.context.cwd,this.context.plugins),{project:a,workspace:t}=await s.Project.find(e,this.context.cwd);if(!t)throw new o.WorkspaceRequiredError(a.cwd,this.context.cwd);return(await s.StreamReport.start({configuration:e,stdout:this.context.stdout},async a=>{const o=i(t);await Promise.all(this.patterns.map(s=>u(e,t,a,"disable",s,o)))})).exitCode()}}d.paths=[["leaf","disable"]],d.usage=r.Command.Usage({description:"uninstall leaf workspace modules",details:"\n      This command allows to uninstall modules which are excluded from the ordinary installation.\n    ",examples:[["Disable a leaf workspace","yarn leaf disable @tools/git-hooks"]]});class p extends o.BaseCommand{async execute(){const e=await s.Configuration.find(this.context.cwd,this.context.plugins),{project:a,workspace:t}=await s.Project.find(e,this.context.cwd);if(!t)throw new o.WorkspaceRequiredError(a.cwd,this.context.cwd);return(await s.StreamReport.start({configuration:e,stdout:this.context.stdout},async a=>{const o=await i(t);a.reportInfo(s.MessageName.UNNAMED,`Found ${o.length} leaf module${1===o.length?"":"s"}.`),a.reportInfo(s.MessageName.UNNAMED,s.formatUtils.prettyList(e,o.map(e=>`${e.hasNodeModules?"✔":"𐄂"} ${e.manifest.name.name}`),"green"))})).exitCode()}}async function u(e,a,o,r,i,l){const c=(await l).find(e=>e.manifest.name.name===i);c?("activate"!==r||c.hasNodeModules||await(0,t.execute)("yarn",[],{cwd:c.absolutePath}),"disable"===r&&c.hasNodeModules&&await n.xfs.removePromise(n.ppath.join(c.absolutePath,"node_modules"),{recursive:!0}),o.reportInfo(s.MessageName.UNNAMED,s.formatUtils.pretty(e,`leaf '${i}' is now ${r}`,"green"))):o.reportError(s.MessageName.UNNAMED,s.formatUtils.pretty(e,`Could not find leaf '${i}'`,"red"))}p.paths=[["leaf"]],p.usage=r.Command.Usage({description:"leaf workspace modules",details:"\n      This command allows to install modules which are excluded from the ordinary installation.\n    ",examples:[["Activate a leaf workspace","yarn leaf activate @tools/git-hooks"],["Disable a leaf workspace","yarn leaf disable @tools/git-hooks"],["View all leaf workspaces","yarn leaf"]]});const m=new WeakMap,f={commands:[p,c,d],hooks:{validateWorkspace(e){const{optionalWorkspaces:a}=e.manifest.raw;if(!a||!Array.isArray(a))return;const o=m.get(e.project),s=o||[];o||m.set(e.project,s),s.push(i(e).then(async e=>Promise.all(e.map(async e=>{const{manifest:a,hasNodeModules:o,absolutePath:s}=await e;return o?(await(0,t.execute)("yarn",[],{cwd:s}),"✨ Updated "+a.raw.name):"Skipping "+a.raw.name}))))},afterAllInstalled:async e=>{const a=m.get(e);if(a){(await Promise.all(a)).forEach(e=>e.forEach(e=>{console.log(e)}))}}}};plugin=a})();
return plugin;
}
};